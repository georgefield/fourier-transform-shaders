#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in; //amd gpu size 64 wavefront

layout(std430, binding = 0) buffer sampleBuffer
{
	float samples[]; //between -1 and 1
};

layout(std430, binding = 1) buffer harmonicValueBuffer
{
	float harmonicValues[]; //between 0 and 1
};

uniform int _currentSample;

const int n = 4096; //num samples to work with
float oneOver2N = 1.0f / (2.0f * float(n));
float Pi = acos(-1);
uint k = 0;

vec2 fft();
vec2 complexMultiply(vec2 a, vec2 b);

void main()
{
	k = gl_WorkGroupID.x * 64 + gl_LocalInvocationID.x * 8 + gl_LocalInvocationID.y; //go through harmonics 1 by 1 (up to n/2)
	if (k >= int(n/2)){
		return;
	}
	
	
	vec2 fft = fft(); //every 1 value first with 0 offset
	
	harmonicValues[k] = sqrt(fft.x * fft.x + fft.y * fft.y) * 2.0f * oneOver2N; //absolute value of complex dot product
}


//technically O(n) but takes advantage of factoring possible in fourier transform
//no recursion in compute shader this is the best I could do to incorporate fft without recursion
vec2 fft(){

	//half size array do first step straight from samples
	vec2 memArr[n/2];

	float optMult = -2 * Pi * float(k) * oneOver2N;
	
	vec2 oddFactor = vec2(cos(optMult * 2), sin(optMult * 2));
	for (int i = 0; i < n>>1; i++) {
		vec2 tmp = complexMultiply(vec2(samples[(2 * i) + 1 + _currentSample],0), oddFactor);
		memArr[i].x = samples[(2 * i) + _currentSample] + tmp.x;
		memArr[i].y = tmp.y;
	}
	
	
	//start on second step
	int twoToTheStep = 4;
	int stepNo = 2;
	while (twoToTheStep <= n) {
		oddFactor = vec2(cos(optMult * float(twoToTheStep)), sin(optMult * float(twoToTheStep)));	
		
		for (int i = 0; i < n>>stepNo; i++) {
			vec2 tmp = complexMultiply(memArr[(2 * i) + 1], oddFactor);
			memArr[i].x = memArr[(2 * i)].x + tmp.x;
			memArr[i].y = memArr[(2 * i)].y + tmp.y;
		}
		
		stepNo++;
		twoToTheStep = twoToTheStep<<1;
	}

	return memArr[0];
}

vec2 complexMultiply(vec2 a, vec2 b){
	return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

